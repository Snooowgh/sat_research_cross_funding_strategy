# coding=utf-8
"""
@Project     : darwin_light
@Author      : Arson
@File Name   : position_stream
@Description : ‰ªì‰ΩçWebSocketÊµÅÁõëÂê¨Âü∫Á±ª
@Time        : 2025/10/15
"""
import time
from abc import ABC, abstractmethod
from typing import Optional, Callable, Dict, List
from loguru import logger
from cex_tools.exchange_model.position_event_model import PositionEvent, PositionEventType


class PositionWebSocketStream(ABC):
    """‰ªì‰ΩçWebSocketÊµÅÁõëÂê¨Âô®ÊäΩË±°Âü∫Á±ª"""

    def __init__(self, exchange_name: str, on_position_callback: Callable[[PositionEvent], None]):
        """
        ÂàùÂßãÂåñ‰ªì‰ΩçWebSocketÊµÅ

        Args:
            exchange_name: ‰∫§ÊòìÊâÄÂêçÁß∞
            on_position_callback: ‰ªì‰Ωç‰∫ã‰ª∂ÂõûË∞ÉÂáΩÊï∞
        """
        self.exchange_name = exchange_name
        self.on_position_callback = on_position_callback
        self.latest_positions: Dict[str, any] = {}  # symbol -> position_detail
        self._running = False
        self._last_update_time = 0

    @abstractmethod
    async def start(self):
        """ÂêØÂä® WebSocket ËøûÊé•"""
        pass

    @abstractmethod
    async def stop(self):
        """ÂÅúÊ≠¢ WebSocket ËøûÊé•"""
        pass

    @property
    def is_running(self) -> bool:
        """ÊòØÂê¶Ê≠£Âú®ËøêË°å"""
        return self._running

    def get_latest_position(self, symbol: str) -> Optional[any]:
        """Ëé∑ÂèñÊåáÂÆö‰∫§ÊòìÂØπÁöÑÊúÄÊñ∞‰ªì‰Ωç‰ø°ÊÅØ"""
        return self.latest_positions.get(symbol)

    def get_all_positions(self) -> Dict[str, any]:
        """Ëé∑ÂèñÊâÄÊúâÊúÄÊñ∞‰ªì‰Ωç‰ø°ÊÅØ"""
        return self.latest_positions.copy()

    def get_open_positions(self) -> Dict[str, any]:
        """Ëé∑ÂèñÊâÄÊúâÂºÄ‰ªì‰ø°ÊÅØ"""
        return {
            symbol: pos for symbol, pos in self.latest_positions.items()
            if hasattr(pos, 'positionAmt') and pos.positionAmt != 0
        }

    def _on_position_update(self, position_detail: any, event_type: PositionEventType = None):
        """
        ÂÜÖÈÉ®ÂõûË∞ÉÔºöÂΩì‰ªì‰ΩçÊõ¥Êñ∞Êó∂Ë∞ÉÁî®

        Args:
            position_detail: ‰ªì‰ΩçËØ¶ÊÉÖ
            event_type: ‰∫ã‰ª∂Á±ªÂûãÔºàÂèØÈÄâÔºåËá™Âä®Ê£ÄÊµãÔºâ
        """
        try:
            symbol = getattr(position_detail, 'symbol', '')
            if not symbol:
                logger.warning(f"[{self.exchange_name}] ‰ªì‰ΩçÊõ¥Êñ∞Áº∫Â∞ësymbol‰ø°ÊÅØ")
                return

            # Ëé∑ÂèñÂâç‰∏ÄÊ¨°‰ªì‰ΩçÁî®‰∫éÊØîËæÉ
            previous_position = self.latest_positions.get(symbol)

            # Ëá™Âä®Ê£ÄÊµã‰∫ã‰ª∂Á±ªÂûã
            if event_type is None and previous_position:
                prev_size = getattr(previous_position, 'positionAmt', 0)
                curr_size = getattr(position_detail, 'positionAmt', 0)
                event_type = PositionEvent.detect_event_type(prev_size, curr_size)
            elif event_type is None:
                event_type = PositionEventType.UPDATE

            # Êõ¥Êñ∞ÁºìÂ≠ò
            self.latest_positions[symbol] = position_detail
            self._last_update_time = time.time()

            # ÂàõÂª∫‰ªì‰Ωç‰∫ã‰ª∂
            position_event = PositionEvent.create_from_position_detail(
                exchange_code=self.exchange_name,
                position_detail=position_detail,
                previous_position=previous_position,
                event_type=event_type
            )

            # Ëß¶ÂèëÁî®Êà∑ÂõûË∞É
            try:
                self.on_position_callback(position_event)
            except Exception as e:
                logger.error(f"[{self.exchange_name}] ‰ªì‰ΩçÂõûË∞ÉÂºÇÂ∏∏: {e}")

        except Exception as e:
            logger.error(f"[{self.exchange_name}] Â§ÑÁêÜ‰ªì‰ΩçÊõ¥Êñ∞ÂºÇÂ∏∏: {e}")

    def _on_positions_update(self, positions: List[any]):
        """
        ÊâπÈáèÂ§ÑÁêÜÂ§ö‰∏™‰ªì‰ΩçÊõ¥Êñ∞

        Args:
            positions: ‰ªì‰ΩçÂàóË°®
        """
        try:
            # ÂàõÂª∫‰∏¥Êó∂ÂâØÊú¨Áî®‰∫éÊ£ÄÊµãÂ∑≤ÂÖ≥Èó≠ÁöÑ‰ªì‰Ωç
            previous_positions = self.latest_positions.copy()
            current_symbols = set()

            # Â§ÑÁêÜÂΩìÂâçÊâÄÊúâ‰ªì‰Ωç
            for position_detail in positions:
                symbol = getattr(position_detail, 'symbol', '')
                if symbol:
                    current_symbols.add(symbol)
                    self._on_position_update(position_detail)

            # Ê£ÄÊµãÂ∑≤ÂÖ≥Èó≠ÁöÑ‰ªì‰Ωç
            for symbol, prev_position in previous_positions.items():
                if symbol not in current_symbols and hasattr(prev_position, 'positionAmt') and prev_position.positionAmt != 0:
                    # ÂàõÂª∫Á©∫‰ªì‰ΩçË°®Á§∫ÂÖ≥Èó≠
                    empty_position = type(prev_position)({})
                    if hasattr(empty_position, '__init__'):
                        empty_position.__init__({})
                    # ËÆæÁΩÆÂøÖË¶ÅÂ±ûÊÄß
                    for attr in ['symbol', 'pair', 'exchange_code']:
                        if hasattr(prev_position, attr):
                            setattr(empty_position, attr, getattr(prev_position, attr))
                    if hasattr(empty_position, 'positionAmt'):
                        empty_position.positionAmt = 0

                    self._on_position_update(empty_position, PositionEventType.CLOSE)

        except Exception as e:
            logger.error(f"[{self.exchange_name}] ÊâπÈáèÂ§ÑÁêÜ‰ªì‰ΩçÊõ¥Êñ∞ÂºÇÂ∏∏: {e}")

    def get_status_report(self) -> str:
        """Ëé∑ÂèñÁä∂ÊÄÅÊä•Âëä"""
        age = time.time() - self._last_update_time if self._last_update_time > 0 else float('inf')
        open_positions = len(self.get_open_positions())
        total_positions = len(self.latest_positions)

        report = f"üìä {self.exchange_name} ‰ªì‰ΩçWebSocketÊµÅÁä∂ÊÄÅ:\n"
        report += f"  ‚Ä¢ ËøûÊé•Áä∂ÊÄÅ: {'üü¢ ËøêË°å‰∏≠' if self._running else 'üî¥ Â∑≤ÂÅúÊ≠¢'}\n"
        report += f"  ‚Ä¢ ‰ªì‰ΩçÊÄªÊï∞: {total_positions}\n"
        report += f"  ‚Ä¢ ÂºÄ‰ªìÊï∞Èáè: {open_positions}\n"
        report += f"  ‚Ä¢ ÊúÄÂêéÊõ¥Êñ∞: {age:.1f}ÁßíÂâç"

        if open_positions > 0:
            report += f"\n  ‚Ä¢ ÂºÄ‰ªìÂàóË°®:"
            for symbol, position in self.get_open_positions().items():
                size = getattr(position, 'positionAmt', 0)
                pnl = getattr(position, 'unRealizedProfit', 0)
                side = "Â§ö" if size > 0 else "Á©∫"
                report += f"\n    - {symbol}: {side}{abs(size):.4f} Áõà‰∫è:{pnl:.4f}"

        return report

    def is_position_stale(self, max_age_sec: float = 30.0) -> bool:
        """Âà§Êñ≠‰ªì‰ΩçÊï∞ÊçÆÊòØÂê¶ËøáÊúü"""
        return (time.time() - self._last_update_time) > max_age_sec

    def get_position_summary(self) -> str:
        """Ëé∑Âèñ‰ªì‰ΩçÊëòË¶Å"""
        open_positions = self.get_open_positions()
        if not open_positions:
            return f"{self.exchange_name}: Êó†ÂºÄ‰ªì"

        total_pnl = sum(getattr(pos, 'unRealizedProfit', 0) for pos in open_positions.values())
        long_count = sum(1 for pos in open_positions.values() if getattr(pos, 'positionAmt', 0) > 0)
        short_count = sum(1 for pos in open_positions.values() if getattr(pos, 'positionAmt', 0) < 0)

        return (f"{self.exchange_name}: {len(open_positions)}‰∏™ÂºÄ‰ªì "
                f"(Â§ö:{long_count} Á©∫:{short_count}) ÊÄªÁõà‰∫è:{total_pnl:.4f}")

    async def health_check(self) -> bool:
        """ÂÅ•Â∫∑Ê£ÄÊü•"""
        if not self._running:
            return False
        return not self.is_position_stale()